print((2*(1/2))/(1+(1/2)*(1/length(exemplars.2))))
#    print((2*(2/3))/(1+(2/3)*(1/length(exemplars.2))))
#  print(length(exemplars.2))
#  if (SOE.all < (2*0.5)/(1+0.5*(1/length(exemplars.2))))
if (SOE.all < (2*(1/2))/(1+(1/2)*(1/length(exemplars.2))))
#    if (SOE.all < (2*(2/3))/(1+(2/3)*(1/length(exemplars.2))))
{
print("SOE检测出异常")
tar <- 1
}
}
}
}
#else
#{
#  两个聚类中心点编号相同
#  }
if (tar==0)
print('未发现异常')
# print('DDD1:')
# print(DDD1)
print("次数：")
h=h+1
print(h)
print('     ')
#  gc3 <- gc()
# print(gc3)
#print(apres.1)
#print(apres.2)
#return(con.table)
#  timeend<-Sys.time()
# runningtime<-timeend-timestart
#print(runningtime)
#proc.time() - ptm
# print(proc.time() - ptm)
# protmime <- protmime+(proc.time() - ptm)
# print('内存是')
# print(memory.size(F))
# m2 <-memory.size(F)
# m3 <- m2-m1
# print(m3)
# print(memory.size(max = F))
#m3 <-m3+m2-m1
# print(m2-m1)
# print(ptm)
xxx <- xxx+1
}
slide5.vv2 <<-xx
#  m2 <- memory.size(T)
# gc2 <- gc()
# print(gc2)
#print(protmime/10)
#  print('内存!!!!是')
# total <- (as.numeric(gsub("[^0-9]*([0-9]*)", "\\1", system("wmic OS get FreePhysicalMemory /Value", intern=TRUE))[3]))/1000
# print(total)
# print(m3/10)
# print(m3/10)
# print(m2-m1)
# print(gc2[4]-gc1[4])
}
View(att200)
View(nor2000att200)
View(normal4000)
ap.experiment(normal4000)
library(apcluster)
install.packages("apcluster")
library(apcluster)
ap.experiment(normal4000)
asoe.5slide.kdd99 <-as.matrix(0,210,1)
asoe.5slide.kdd99 <-res10win
View(asoe.5slide.kdd99)
asoe.5slide.kdd99 <-res.normal.matrix
asoe.5slide.kdd99 <-res.normal.matrix[,1]
asoe.5slide.kdd99 <-res.normal.matrix
asoe.5slide.kdd99 <-res.normal.matrix[,2]
asoe.5slide.kdd99 <-res.normal.matrix
asoe.5slide.kdd99[1:100,2] <-slide5.vv2
asoe.5slide.kdd99[1:100,2] <-slide5.vv2[1:100]
View(asoe.5slide.kdd99)
asoe.5slide.kdd99[1:210,2] <-0
asoe.5slide.kdd99[1:100,2] <-slide5.vv2[1:100]
View(asoe.5slide.kdd99)
source('E:/9-12测试/experiment .R', encoding = 'UTF-8')
source('E:/9-12测试/experiment .R', encoding = 'UTF-8')
ap.experiment(normal4000)
asoe.5slide.kdd99[101:200,2] <-slide5.vv2[1:100]
View(asoe.5slide.kdd99)
View(att200)
source('E:/9-12测试/experiment .R', encoding = 'UTF-8')
source('E:/9-12测试/experiment .R', encoding = 'UTF-8')
ap.experiment(att200)
asoe.5slide.kdd99[201:210,2] <-slide5.vv2[1:10]
View(asoe.5slide.kdd99)
source('E:/9-12测试/experiment .R', encoding = 'UTF-8')
View(att200)
View(asoe.5slide.kdd99)
write.csv(asoe.5slide.kdd99,"asoe-5slide-kdd99.csv")
asoe.15.20slide.kdd99 <- read.csv("E:/9-12测试/最后的AUC评价15-20/kdd15-20slide-nor.csv",header = T)
View(asoe.15.20slide.kdd99)
data.asoe.15.20slide.kdd99 <- read.csv("E:/9-12测试/最后的AUC评价15-20/kdd15-20slide-nor.csv",header = T)
remove(asoe.15.20slide.kdd99)
View(data.asoe.15.20slide.kdd99)
source('E:/9-12测试/experiment .R', encoding = 'UTF-8')
source('E:/9-12测试/experiment .R', encoding = 'UTF-8')
ap.experiment(data.asoe.15.20slide.kdd99)
View(asoe.5slide.kdd99)
asoe.15slide.kdd99  <-asoe.5slide.kdd99
View(slide5.vv2)
asoe.15slide.kdd99[1:100,2]<-slide5.vv2[1:100]
View(asoe.15slide.kdd99)
asoe.15slide.kdd99[101:210,2]<-0
View(asoe.5slide.kdd99)
asoe.5slide.kdd99[asoe.5slide.kdd99>3] <-0.5
View(asoe.5slide.kdd99)
asoe.5slide.kdd99<-asoe.5slide.kdd99[,2]
asoe.5slide.kdd99<-as.matrix(asoe.5slide.kdd99)
View(asoe.5slide.kdd99)
asoe.5slide.kdd99<-(1/asoe.5slide.kdd99 )
View(asoe.5slide.kdd99)
View(asoe.5slide.kdd99)
View(asoe.5slide.kdd99)
write.csv(asoe.5slide.kdd99,"asoe-5slide-kdd99.csv")
View(asoe.15slide.kdd99)
View(asoe.15slide.kdd99)
source('E:/9-12测试/experiment .R', encoding = 'UTF-8')
write.csv(asoe.5slide.kdd99,"asoe-5slide-kdd99.csv")
ap.experiment(data.asoe.15.20slide.kdd99)
library(apcluster)
ap.experiment(data.asoe.15.20slide.kdd99)
View(asoe.15slide.kdd99)
asoe.15slide.kdd99[101:200,2]<-slide5.vv2[1:100]
View(asoe.15slide.kdd99)
sum(asoe.15slide.kdd99[asoe.15slide.kdd99>3])
sum(asoe.15slide.kdd99[asoe.15slide.kdd99[]>3])
asoe.15slide.kdd99[asoe.15slide.kdd99>3]
sum(asoe.15slide.kdd99[asoe.15slide.kdd99[,2]>3])
asoe.15slide.kdd99[asoe.15slide.kdd99[,2]>3]
source('E:/9-12测试/experiment .R', encoding = 'UTF-8')
ap.experiment(data.asoe.15.20slide.kdd99)
asoe.15slide.kdd99[201:210,2]<-slide5.vv2[1:10]
View(asoe.15slide.kdd99)
plot(asoe.15slide.kdd99[,2])
asoe.15slide.kdd99[asoe.15slide.kdd99[,2]>3] <- 0.5
View(asoe.15slide.kdd99)
asoe.15slide.kdd99[,2]<-(1/asoe.15slide.kdd99[,2])
View(asoe.15slide.kdd99)
asoe.15slide.kdd99[,2]<-(asoe.15slide.kdd99[,2]/2)
View(asoe.15slide.kdd99)
plot(asoe.15slide.kdd99[,2])
write.csv(asoe.15slide.kdd99,"asoe-15slide-kdd99-结果.csv")
source('E:/9-12测试/experiment .R', encoding = 'UTF-8')
ap.experiment(data.asoe.15.20slide.kdd99)
View(asoe.5slide.kdd99)
asoe.20slide.kdd99 <- asoe.5slide.kdd99
View(asoe.20slide.kdd99)
asoe.20slide.kdd99[1:100,1] <- slide5.vv2[1:100]
View(asoe.20slide.kdd99)
asoe.20slide.kdd99[1:210,1] <- 0
View(asoe.20slide.kdd99)
asoe.20slide.kdd99[1:100,1] <- slide5.vv2[1:100]
View(asoe.20slide.kdd99)
source('E:/9-12测试/experiment .R', encoding = 'UTF-8')
ap.experiment(data.asoe.15.20slide.kdd99)
asoe.20slide.kdd99[101:200,1] <- slide5.vv2[1:100]
View(asoe.20slide.kdd99)
View(asoe.15slide.kdd99)
source('E:/9-12测试/experiment .R', encoding = 'UTF-8')
ap.experiment(data.asoe.15.20slide.kdd99)
asoe.20slide.kdd99[201:210,1] <- slide5.vv2[1:10]
source('E:/9-12测试/experiment .R', encoding = 'UTF-8')
ap.experiment(data.asoe.15.20slide.kdd99)
View(asoe.20slide.kdd99)
View(asoe.20slide.kdd99)
View(asoe.20slide.kdd99)
View(asoe.20slide.kdd99)
plot(asoe.20slide.kdd99)
for(i in seq(1,210,1))
if(asoe.20slide.kdd99[i,1]>3)
asoe.20slide.kdd99[i,1]<-0.5
View(asoe.20slide.kdd99)
asoe.20slide.kdd99 <- (1/asoe.20slide.kdd99)
plot(asoe.20slide.kdd99)
View(slide5.vv2)
View(slide5.vv2)
slide5.vv2[1]<- 0.5
View(slide5.vv2)
slide5.vv2[2]<- 0.5
ap.experiment <- function(data , r=6 , window.size=2000 , slide.size=20, q=0.01)
{
protmime <- 0
m3 <- 0
h=0
xx <- matrix(0,1,110)
xxx <-1
# m1 <-memory.size(T)
#gc1 <- gc()
# print(gc1)
for(i in seq(1,(9*slide.size+1),slide.size))
#for(i in seq(1,(29*slide.size+1),slide.size))
#for(i in c(10,110,210,310,400,510,620,730,800,900))
{
#i=1
#for 循环
data.1 <- data[1:(1+window.size-1),]
data.2 <- data[c(1:(1+window.size-1),(6000+i):(6000+i-1+slide.size)),]
# data.1 <- data[i:(i+window.size-1),]
#data.2 <- data[i:(i+window.size-1+slide.size),]
apres.1 <- apcluster(negDistMat(r=r),data.1,q=q)
apres.2 <- apcluster(negDistMat(r=r),data.2,q=q)
exemplars.1 <- as.vector(apres.1@exemplars)
exemplars.2 <- as.vector(apres.2@exemplars)
#exemplars.1 <- apres.1@exemplars
#exemplars.2 <- apres.2@exemplars
print('一共聚了多少类')
print(length(exemplars.2))
tar <- 0
#timestart<-Sys.time()
DDD1<- 1000
#print(apres.1)
#print(apres.2)
#  print(memory.size(max = F))
#print(exemplars.1)
# print(exemplars.2)
# ptm <- proc.time()
rm(con.table)
rm(c1)
rm(E.nij)
rm(x2)
rm(ap.dist)
rm(SOE)
rm(D)
rm(D1)
rm(D2)
rm(con)
rm(SOE.all)
rm(weight)
gc(reset = T)
############################################################
ap.dist <- as.matrix(dist(data.2))
ap.dist1  <<-  ap.dist
D <- vector(mode = 'integer')
con <-vector()
SOE <-vector()
for(j in 1:length(exemplars.2))
{
D <- as.vector(unlist(apres.2@clusters[j]))
D1 <- D[D<=(window.size)]
D2 <- D[D>(window.size)]
D1 <- D[D<=(window.size)]
D2 <- D[D>(window.size)]
if (length(D2)!=0&&length(D1)!=0)
{
D1 <- mean(ap.dist[exemplars.2[j],D1])
D2 <- mean(ap.dist[exemplars.2[j],D2])
if(D1<DDD1)
DDD1 <- D1
con <- D1/D2
}
}
###############################################
# print(memory.size())
#m1 <- memory.size()
if (length(exemplars.1)!=length(exemplars.2))
{ print("聚类数目发生了改变")
tar <- 1
xx[1,xxx]<- 10
}
else
{
#  print(exemplars.2)
# print(exemplars.2[length(exemplars.2)])
#  print(i+window.size-1)
if(exemplars.2[length(exemplars.2)]+i > (i+window.size-1))
{
print("exemplar在active中，发现离群点")
tar <- 1
xx[1,xxx]<- 11
}
else
{
#  print('11111111')
#计算CT
con.table <- matrix(nrow = length(exemplars.1)+1,ncol = length(exemplars.1)+1)
# print('111111111')
#  print(con.table)
#  print(exemplars.1)
for(i in 1:length(exemplars.1))
{
for(j in 1:length(exemplars.1))
{
#intersect可以比较出2个向量中相同部分的个数
con.table[i,j] <-length(intersect(as.vector(unlist(apres.1@clusters[i])),as.vector(unlist(apres.2@clusters[j]))))
}
}
#   print(con.table)
c1 <- max.col(con.table[1:length(exemplars.1),1:length(exemplars.1)])
for(i in 1:length(exemplars.1))    # set max to 0
{
#con.table[i,(max.col(con.table)[i])] <-0
#con.table[i,max.col(con.table)] <-0
con.table[i,c1[i]] <- 0
}
#con.table.test <<- con.table
#  print(con.table)
for(i in 1:length(exemplars.1))  # compute nii
{
con.table[i,(length(exemplars.1)+1)]<- sum(con.table[i,1:length(exemplars.1)])
con.table[(length(exemplars.1)+1),i]<- sum(con.table[1:length(exemplars.1),i])
}
#  print("1111111111")
#   print(con.table)
con.table[(length(exemplars.1)+1),(length(exemplars.1)+1)] <- sum(con.table[1:length(exemplars.1),(length(exemplars.1)+1)])  #compute n ,n =con.table[(exemplars.1+1),(exemplars.1+1)]
# print("1111111111")
# print(con.table)
#identical可以比较两个向量是否相同
# if (!identical(exemplars.1,exemplars.2))  #如果两个聚类中心点不相同
####  {
x2 <- 0
# print(x2)
if (con.table[(length(exemplars.1)+1),(length(exemplars.1)+1)]!=0)
{
for(i in 1:length(exemplars.1))   #compute x2
{
for(j in 1:length(exemplars.1))
{
E.nij <- con.table[i,(length(exemplars.1)+1)]*con.table[(length(exemplars.1)+1),j]/con.table[(length(exemplars.1)+1),(length(exemplars.1)+1)]
if (E.nij!=0)
x2 <-( x2 + ((con.table[i,j] - E.nij)^2 / E.nij ))
#  print("EIJ:")
#  print(E.nij)
#  print('X2:')
#   print(x2)
}
}
}
#   print('x2总')
#  print(x2)
if (x2 > 3.84)
{
print('95%发现异常')
tar <- 1
xx[1,xxx]<- 12
}
#####   #}
#else  #两个聚类中心点相同。
if (tar !=1)
{
ap.dist <- as.matrix(dist(data.2))
# ap.dist1  <<-  ap.dist
# D <- vector(mode = 'integer')
con <-vector()
SOE <-vector()
for(j in 1:length(exemplars.2))
{
D <- as.vector(unlist(apres.2@clusters[j]))
D1 <- D[D<=(window.size)]
D2 <- D[D>(window.size)]
#  D1 <- D[D<=(window.size)]
#   D2 <- D[D>(window.size)]
#      print('D1:')
#     print(D1)
#     print('D2:')
#       print(D2)
# print('D:')
#print(D)
if (length(D2)!=0&&length(D1)!=0)
{
D1 <- mean(ap.dist[exemplars.2[j],D1])
D2 <- mean(ap.dist[exemplars.2[j],D2])
if(D1<DDD1)
DDD1 <- D1
con <- D1/D2
}
else
con <- 0
if(con.table[(length(exemplars.2)+1),(length(exemplars.2)+1)]!=0)
weight<-con.table[(length(exemplars.2)+1),j]/con.table[(length(exemplars.2)+1),(length(exemplars.2)+1)]
else
weight <- 1/length(exemplars.2)
SOE[j] <- 2*con/(1+con*weight)
# print('con是')
#  print(con)
#  print('weight是')
#  print(weight)
}
#  print('SOE是')
# print(SOE)
SOE.all <- min(SOE[SOE>0])
print("SOE的值为：")
print(SOE.all)
xx[1,xxx]<- SOE.all
print('阈值是：')
print((2*(1/2))/(1+(1/2)*(1/length(exemplars.2))))
#    print((2*(2/3))/(1+(2/3)*(1/length(exemplars.2))))
#  print(length(exemplars.2))
#  if (SOE.all < (2*0.5)/(1+0.5*(1/length(exemplars.2))))
if (SOE.all < (2*(1/2))/(1+(1/2)*(1/length(exemplars.2))))
#    if (SOE.all < (2*(2/3))/(1+(2/3)*(1/length(exemplars.2))))
{
print("SOE检测出异常")
tar <- 1
}
}
}
}
#else
#{
#  两个聚类中心点编号相同
#  }
if (tar==0)
print('未发现异常')
# print('DDD1:')
# print(DDD1)
print("次数：")
h=h+1
print(h)
print('     ')
#  gc3 <- gc()
# print(gc3)
#print(apres.1)
#print(apres.2)
#return(con.table)
#  timeend<-Sys.time()
# runningtime<-timeend-timestart
#print(runningtime)
#proc.time() - ptm
# print(proc.time() - ptm)
# protmime <- protmime+(proc.time() - ptm)
# print('内存是')
# print(memory.size(F))
# m2 <-memory.size(F)
# m3 <- m2-m1
# print(m3)
# print(memory.size(max = F))
#m3 <-m3+m2-m1
# print(m2-m1)
# print(ptm)
xxx <- xxx+1
}
slide5.vv2 <<-xx
#  m2 <- memory.size(T)
# gc2 <- gc()
# print(gc2)
#print(protmime/10)
#  print('内存!!!!是')
# total <- (as.numeric(gsub("[^0-9]*([0-9]*)", "\\1", system("wmic OS get FreePhysicalMemory /Value", intern=TRUE))[3]))/1000
# print(total)
# print(m3/10)
# print(m3/10)
# print(m2-m1)
# print(gc2[4]-gc1[4])
}
source('E:/9-12测试/experiment .R', encoding = 'UTF-8')
ap.experiment(data.asoe.15.20slide.kdd99)
library(apcluster)
ap.experiment(data.asoe.15.20slide.kdd99)
View(slide5.vv2)
slide5.vv2[2]<- 0.5
slide5.vv2[1]<- 0.5
slide5.vv2[3]<- 0.5
slide5.vv2[5]<- 0.5
slide5.vv2[6]<- 0.5
slide5.vv2[8]<- 0.5
View(slide5.vv2)
slide5.vv2<- (1/slide5.vv2)
View(slide5.vv2)
asoe.20slide.kdd99[201:210,] <-slide5.vv2[1:10]
View(asoe.20slide.kdd99)
plot(asoe.20slide.kdd99)
asoe.20slide.kdd99.label <-asoe.20slide.kdd99
asoe.20slide.kdd99.label[1:200] <-0
asoe.20slide.kdd99.label[201:210] <-1
AUC20.asoe.kdd = performance(prediction(asoe.20slide.kdd99[,1],asoe.20slide.kdd99.label[,1]), 'auc')@y.values[[1]]
library(ROCR)
AUC20.asoe.kdd = performance(prediction(asoe.20slide.kdd99[,1],asoe.20slide.kdd99.label[,1]), 'auc')@y.values[[1]]
source('E:/9-12测试/experiment .R', encoding = 'UTF-8')
ap.experiment(data.asoe.15.20slide.kdd99)
write.csv(slide10.window4000.vv2,"slide10-window4000-结果.csv")
data.kdd.window8000.normalize <- read.csv("E:/9-12测试/不同的window测试/window6000/window6000-10000-normalize.csv",header = T)
source('E:/9-12测试/不同的window测试/window8000/experiment .R', encoding = 'UTF-8')
source('E:/9-12测试/不同的window测试/window8000/experiment .R', encoding = 'UTF-8')
source('E:/9-12测试/不同的window测试/window8000/experiment .R', encoding = 'UTF-8')
ap.experiment(data.kdd.window8000.normalize)
library(apcluster)
ap.experiment(data.kdd.window8000.normalize)
source('E:/9-12测试/不同的window测试/window8000/experiment .R', encoding = 'UTF-8')
ap.experiment(data.kdd.window8000.normalize)
View(slide10.window3000.vv2)
write(slide10.window3000.vv2,“kdd-slide10-window3000-结果.csv”)
write(slide10.window3000.vv2,"kdd-slide10-window3000-结果.csv")
View(slide10.window3000.vv2)
write.csv(slide10.window3000.vv2,"slide10-window3000-kdd-jieguo.csv")
View(slide10.window3000.vv2)
slide10.window3000.vv2 <- t(slide10.window3000.vv2)
slide10.window3000.vv2[slide10.window3000.vv2[,1]>3] <-0.5
slide10.window3000.vv2 <- ((1/slide10.window3000.vv2)/2)
View(asoe.20slide.kdd99.label)
AUC.3000window.10slide.kdd.asoe = performance(prediction(slide10.window3000.vv2[,1] ,asoe.20slide.kdd99.label), 'auc')@y.values[[1]]
library(ROCR)
AUC.3000window.10slide.kdd.asoe = performance(prediction(slide10.window3000.vv2[,1] ,asoe.20slide.kdd99.label), 'auc')@y.values[[1]]
source('E:/9-12测试/不同的window测试/window3000/experiment .R', encoding = 'UTF-8')
source('E:/9-12测试/不同的window测试/window3000/experiment .R', encoding = 'UTF-8')
ap.experiment(data.kdd.window8000.normalize)
library(apcluster)
ap.experiment(data.kdd.window8000.normalize)
View(slide10.window2000.vv2.9.30)
slide10.window2000.vv2.9.30 <- t(slide10.window2000.vv2.9.30)
slide10.window2000.vv2.9.30[slide10.window2000.vv2.9.30>3] <-0.5
slide10.window2000.vv2.9.30 <- ((1/slide10.window2000.vv2.9.30)/2)
AUC.3000window.10slide.kdd.asoe = performance(prediction(slide10.window2000.vv2.9.30,asoe.20slide.kdd99.label), 'auc')@y.values[[1]]
getwd()
View(FC.LDCOF)
